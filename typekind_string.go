// Code generated by "stringer -linecomment -type TypeKind"; DO NOT EDIT.

package pdb

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TypeKindNone-0]
	_ = x[TypeKindAbs-1]
	_ = x[TypeKindSegment-2]
	_ = x[TypeKindVoid-3]
	_ = x[TypeKindHRESULT-8]
	_ = x[TypeKindCurrency-4]
	_ = x[TypeKindBasicStringNear-5]
	_ = x[TypeKindBasicStringFar-6]
	_ = x[TypeKindNotTranslated-7]
	_ = x[TypeKindBit-96]
	_ = x[TypeKindPascalChar-97]
	_ = x[TypeKindBool32FFFFFFFF-98]
	_ = x[TypeKindCharacter-112]
	_ = x[TypeKindWideCharacter-113]
	_ = x[TypeKindRune16-122]
	_ = x[TypeKindRune32-123]
	_ = x[TypeKindInt8-104]
	_ = x[TypeKindUint8-105]
	_ = x[TypeKindInt16-114]
	_ = x[TypeKindUint16-115]
	_ = x[TypeKindInt32-116]
	_ = x[TypeKindUint32-117]
	_ = x[TypeKindInt64-118]
	_ = x[TypeKindUint64-119]
	_ = x[TypeKindInt128-120]
	_ = x[TypeKindUint128-121]
	_ = x[TypeKindChar-16]
	_ = x[TypeKindUChar-32]
	_ = x[TypeKindShort-17]
	_ = x[TypeKindUShort-33]
	_ = x[TypeKindLong-18]
	_ = x[TypeKindQuad-19]
	_ = x[TypeKindUQuad-35]
	_ = x[TypeKindOctet-20]
	_ = x[TypeKindUOctet-36]
	_ = x[TypeKindReal16-70]
	_ = x[TypeKindReal32-64]
	_ = x[TypeKindReal32PP-69]
	_ = x[TypeKindReal48-68]
	_ = x[TypeKindReal64-65]
	_ = x[TypeKindReal80-66]
	_ = x[TypeKindReal128-67]
	_ = x[TypeKindComplex32-80]
	_ = x[TypeKindComplex64-81]
	_ = x[TypeKindComplex80-82]
	_ = x[TypeKindComplex128-83]
	_ = x[TypeKindBool8-48]
	_ = x[TypeKindBool16-49]
	_ = x[TypeKindBool32-50]
	_ = x[TypeKindBool64-51]
	_ = x[TypeKindInternal-240]
}

const _TypeKind_name = "uncharacterized type (no type)absolute symbolsegment typevoidBASIC 8 byte currency valuenear BASIC stringfar BASIC stringtype not translated by cvpackHRESULT8 bit signed16 bit signed32 bit signed64 bit signed128 bit signed8 bit unsigned16 bit unsigned64 bit unsigned128 bit unsigned8 bit boolean16 bit boolean32 bit boolean64 bit boolean32 bit real64 bit real80 bit real128 bit real48 bit real32 bit partial-precision real16 bit real32 bit complex64 bit complex80 bit complex128 bit complexbitPascal CHAR32-bit BOOL where true is 0xffffffff8 bit signed int8 bit unsigned intreally a charwide char16 bit signed int16 bit unsigned int32 bit signed int32 bit unsigned int64 bit signed int64 bit unsigned int128 bit signed int128 bit unsigned int16-bit unicode char32-bit unicode charCV internal type"

var _TypeKind_map = map[TypeKind]string{
	0:   _TypeKind_name[0:30],
	1:   _TypeKind_name[30:45],
	2:   _TypeKind_name[45:57],
	3:   _TypeKind_name[57:61],
	4:   _TypeKind_name[61:88],
	5:   _TypeKind_name[88:105],
	6:   _TypeKind_name[105:121],
	7:   _TypeKind_name[121:150],
	8:   _TypeKind_name[150:157],
	16:  _TypeKind_name[157:169],
	17:  _TypeKind_name[169:182],
	18:  _TypeKind_name[182:195],
	19:  _TypeKind_name[195:208],
	20:  _TypeKind_name[208:222],
	32:  _TypeKind_name[222:236],
	33:  _TypeKind_name[236:251],
	35:  _TypeKind_name[251:266],
	36:  _TypeKind_name[266:282],
	48:  _TypeKind_name[282:295],
	49:  _TypeKind_name[295:309],
	50:  _TypeKind_name[309:323],
	51:  _TypeKind_name[323:337],
	64:  _TypeKind_name[337:348],
	65:  _TypeKind_name[348:359],
	66:  _TypeKind_name[359:370],
	67:  _TypeKind_name[370:382],
	68:  _TypeKind_name[382:393],
	69:  _TypeKind_name[393:422],
	70:  _TypeKind_name[422:433],
	80:  _TypeKind_name[433:447],
	81:  _TypeKind_name[447:461],
	82:  _TypeKind_name[461:475],
	83:  _TypeKind_name[475:490],
	96:  _TypeKind_name[490:493],
	97:  _TypeKind_name[493:504],
	98:  _TypeKind_name[504:540],
	104: _TypeKind_name[540:556],
	105: _TypeKind_name[556:574],
	112: _TypeKind_name[574:587],
	113: _TypeKind_name[587:596],
	114: _TypeKind_name[596:613],
	115: _TypeKind_name[613:632],
	116: _TypeKind_name[632:649],
	117: _TypeKind_name[649:668],
	118: _TypeKind_name[668:685],
	119: _TypeKind_name[685:704],
	120: _TypeKind_name[704:722],
	121: _TypeKind_name[722:742],
	122: _TypeKind_name[742:761],
	123: _TypeKind_name[761:780],
	240: _TypeKind_name[780:796],
}

func (i TypeKind) String() string {
	if str, ok := _TypeKind_map[i]; ok {
		return str
	}
	return "TypeKind(" + strconv.FormatInt(int64(i), 10) + ")"
}
